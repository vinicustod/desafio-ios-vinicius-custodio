//
//  CharacterDetailsViewControllerTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 27/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class CharacterDetailsViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: CharacterDetailsController!
    var window: UIWindow!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupCharacterDetailsViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupCharacterDetailsViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: CharacterDetailsController.identifier, bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: CharacterDetailsController.identifier) as? CharacterDetailsController
        sut.router?.dataStore?.character = MarvelUtility.marvelCharacter
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Tests
    func testDidLoadCharacter() {
        // Given
        let mock = MockCharacterDetailsBusinessLogic()
        sut.interactor = mock

        // When
        loadView()

        // Then
        XCTAssertTrue(mock.didLoadCharacter)
    }

    func testLoadCharacterInfo() {
        // Given
        let displayableCharacter = CharacterDetails.LoadInfo.ViewModel.DisplayableCharacter(name: "Name", description: "Description")
        let viewModel = CharacterDetails.LoadInfo.ViewModel(displayableCharacter: displayableCharacter)
        

        // When
        loadView()
        sut.displayCharacterDetails(viewModel)

        // Then
        XCTAssertEqual(sut.characterNameLabel.text, displayableCharacter.name, "displayCharacterDetails(viewModel:) should update the name in Label")
    }
}

class MockCharacterDetailsBusinessLogic: CharacterDetailsBusinessLogic {
    var didLoadCharacter = false
    func loadCharacter(_ request: CharacterDetails.LoadInfo.Request) {
        didLoadCharacter = true
    }
}
