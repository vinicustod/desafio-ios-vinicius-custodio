//
//  CharacterDetailsPresenterTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 27/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class CharacterDetailsPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: CharacterDetailsPresenter!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupCharacterDetailsPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupCharacterDetailsPresenter() {
        sut = CharacterDetailsPresenter()
    }

    // MARK: Tests
    func testDisplayCharacterDetails() {
        // Given
        let mock = MockCharacterDetailsDisplayLogic()
        sut.viewController = mock

        let response = CharacterDetails.LoadInfo.Response(character: MarvelUtility.marvelCharacter)

        // When
        sut.presentCharacter(response)

        // Then
        XCTAssertTrue(mock.displayedCharacterDetails)
    }

    func testDisplayImage() {
        // Given
        let mock = MockCharacterDetailsDisplayLogic()
        sut.viewController = mock

        let response = CharacterDetails.LoadImage.Response(image: UIImage())

        // When
        sut.presentCharacterImage(response)

        // Then
        XCTAssertTrue(mock.displayedCharacterAvatar)
    }
}

class MockCharacterDetailsDisplayLogic: CharacterDetailsDisplayLogic {
    var displayedCharacterDetails = false
    var displayedCharacterAvatar = false

    func displayCharacterDetails(_ viewModel: CharacterDetails.LoadInfo.ViewModel) {
        displayedCharacterDetails = true
    }

    func displayCharacterAvatar(_ viewModel: CharacterDetails.LoadImage.ViewModel) {
        displayedCharacterAvatar = true
    }


}
