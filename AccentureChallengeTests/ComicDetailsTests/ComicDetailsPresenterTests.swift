//
//  ComicDetailsPresenterTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 27/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class ComicDetailsPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: ComicDetailsPresenter!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupComicDetailsPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupComicDetailsPresenter() {
        sut = ComicDetailsPresenter()
    }

    // MARK: Tests
    func testPresentComic() {
        // Given
        let mock = MockComicDetailsDisplayLogic()
        sut.viewController = mock
        let response = ComicDetails.LoadHighestPriceComic.Response(comic: MarvelUtility.comic)

        // When
        sut.presentComic(response)

        // Then
        XCTAssertTrue(mock.hasLoadedComic)
    }

    func testError() {
        // Given
        let mock = MockComicDetailsDisplayLogic()
        sut.viewController = mock
        let error = ComicDetailsError.noComicFound

        // When
        sut.didFailLoadComic(error)

        // Then
        XCTAssertTrue(mock.hasDisplayedError)
    }

    func testErrorRetry() {
        // Given
        let mock = MockComicDetailsDisplayLogic()
        sut.viewController = mock
        let error = MarvelServiceError.apiError

        // When
        sut.didFailLoadComic(error)

        // Then
        XCTAssertTrue(mock.hasDisplayedErrorRetry)
    }

    
}

class MockComicDetailsDisplayLogic: ComicDetailsDisplayLogic {
    var hasLoadedComic = false
    var hasDisplayedError = false
    var hasDisplayedErrorRetry = false

    func displayLoadedComic(_ viewModel: ComicDetails.LoadHighestPriceComic.ViewModel) {
        hasLoadedComic = true
    }

    func displayErrorWithRetry(_ error: String) {
        hasDisplayedErrorRetry = true
    }

    func displayError(_ error: String) {
        hasDisplayedError = true
    }

    func displayImage(_ viewModel: ComicDetails.LoadImage.ViewModel) {

    }


}
