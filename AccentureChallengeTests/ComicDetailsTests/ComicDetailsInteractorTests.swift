//
//  ComicDetailsInteractorTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 27/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class ComicDetailsInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: ComicDetailsInteractor!
    var mockService: MockMarvelService!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupComicDetailsInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupComicDetailsInteractor() {
        mockService = MockMarvelService()
        sut = ComicDetailsInteractor()
        sut.worker = ComicDetailsWorker(marvelAPI: mockService)
        sut.character = MarvelUtility.marvelCharacter
    }

    // MARK: Tests
    func testLoadComic() {
        // Given
        let mock = MockComicDetailsPresentationLogic()
        sut.presenter = mock
        mockService.mockType = .comics
        let request = ComicDetails.LoadHighestPriceComic.Request()

        // When
        sut.loadComic(request)

        // Then
        XCTAssertTrue(mock.hasPresentComic)
    }

    func testFailLoadComic() {
        // Given
        let mock = MockComicDetailsPresentationLogic()
        sut.presenter = mock
        mockService.mockType = .error
        let request = ComicDetails.LoadHighestPriceComic.Request()

        // When
        sut.loadComic(request)

        // Then
        XCTAssertTrue(mock.hasFailedLoadComic)
    }

}

// MARK: Test doubles
class MockComicDetailsPresentationLogic: ComicDetailsPresentationLogic {
    var hasPresentedImage = false
    var hasPresentComic = false
    var hasFailedLoadComic = false

    func presentImage(_ response: ComicDetails.LoadImage.Response) {
        hasPresentedImage = true
    }

    func presentComic(_ response: ComicDetails.LoadHighestPriceComic.Response) {
        hasPresentComic = true
    }

    func didFailLoadComic(_ error: Error) {
        hasFailedLoadComic = true
    }


}
