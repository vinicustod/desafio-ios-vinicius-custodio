//
//  ComicDetailsWorkerTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 27/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class ComicDetailsWorkerTests: XCTestCase {
    // MARK: Subject under test

    var sut: ComicDetailsWorker!
    var mockService: MockMarvelService!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupComicDetailsWorker()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupComicDetailsWorker() {
        mockService = MockMarvelService()
        sut = ComicDetailsWorker(marvelAPI: mockService)
    }



    // MARK: Tests
    func testSuccessLoadComic() {
        // Given
        let expectation = self.expectation(description: "LoadComic")
        mockService.mockType = .comics
        var didSucceed = false
        // When
        sut.retrieveComics(characterId: 1, offset: 0) { (result) in
            switch result {
            case .success(_):
                didSucceed = true
                expectation.fulfill()

            case .failure(_):
                break
            }
        }

        // Then
        waitForExpectations(timeout: 5, handler: nil)
        XCTAssertTrue(didSucceed)
    }

    func testFailLoadComic() {
        // Given
        let expectation = self.expectation(description: "LoadComic")
        mockService.mockType = .error
        var didSucceed = true
        // When
        sut.retrieveComics(characterId: 1, offset: 0) { (result) in
            switch result {
            case .success(_):
                break

            case .failure(_):
                didSucceed = false
                expectation.fulfill()
            }
        }

        // Then
        waitForExpectations(timeout: 5, handler: nil)
        XCTAssertFalse(didSucceed)
    }
}
