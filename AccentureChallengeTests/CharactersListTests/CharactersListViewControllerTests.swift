//
//  CharactersListViewControllerTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 26/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

let avatarURL = URL(string: "http://i.annihil.us/u/prod/marvel/i/mg/d/03/58dd080719806.jpg")!

class CharactersListViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: CharactersListController!
    var window: UIWindow!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupCharactersListViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    func setupCharactersListViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: CharactersListController.identifier, bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: CharactersListController.identifier) as? CharactersListController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Tests
    func testLoadCharacters() {
        // Given
        let mock = MockCharactersListBusinessLogic()
        sut.interactor = mock

        // When
        loadView()

        // Then
        XCTAssertTrue(mock.doLoadCharacter, "viewDidLoad should call interactor loadCharacter()")
    }

    func testDisplayCharacters() {
        // Given
        let displayableCharacter = CharactersList.LoadPage.ViewModel.DisplayableCharacter(avatarURL: avatarURL, name: "Name")
        let viewModel = CharactersList.LoadPage.ViewModel(displayableCharacters: [displayableCharacter])

        // When
        loadView()
        sut.displayCharacters(viewModel)

        // Then
        let cell = sut.tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as? CharacterCell
        XCTAssertEqual(cell?.characterNameLabel.text, "Name", "displayCHaracter(viewModel:) should update the table")
    }

    func testDidSelectRow() {
        let mock = MockCharactersListBusinessLogic()
        sut.interactor = mock

        let displayableCharacter = CharactersList.LoadPage.ViewModel.DisplayableCharacter(avatarURL: avatarURL, name: "Name")
        let viewModel = CharactersList.LoadPage.ViewModel(displayableCharacters: [displayableCharacter])

        // When
        loadView()
        sut.displayCharacters(viewModel)
        sut.tableView(sut.tableView, didSelectRowAt: IndexPath(item: 0, section: 0))

        // Then
        XCTAssertTrue(mock.doSelectRow)
    }
}

class MockCharactersListBusinessLogic: CharactersListBusinessLogic {
    var doLoadCharacter = false
    var doSelectRow = false

    func loadCharacters(_ request: CharactersList.LoadPage.Request) -> Bool {
        doLoadCharacter = true
        return false
    }

    func didSelectRow(_ index: Int) {
        doSelectRow = true
    }


}
