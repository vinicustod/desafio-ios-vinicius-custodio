//
//  CharactersListInteractorTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 26/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

let collectionURL = URL(string: "http://gateway.marvel.com/v1/public/characters/1011334/series")!
let path = "http://i.annihil.us/u/prod/marvel/i/mg/c/e0/535fecbbb9784"
let fileExtension = "jpg"

class CharactersListInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: CharactersListInteractor!
    var mockService: MockMarvelService!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupCharactersListInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupCharactersListInteractor() {
        mockService = MockMarvelService()
        sut = CharactersListInteractor()

        sut.worker = CharactersListWorker(apiService: mockService)
    }

    // MARK: Tests
    func testLoadCharacters() {
        // Given
        let mock = MockCharactersListPresentationLogic()
        sut.presenter = mock
        mockService.mockType = .characters
        let request = CharactersList.LoadPage.Request()

        // When
        _ = sut.loadCharacters(request)

        // Then
        XCTAssertTrue(mock.hasLoadCharacters)
    }

    func testFailLoadCharacters() {
        // Given
        let mock = MockCharactersListPresentationLogic()
        sut.presenter = mock
        mockService.mockType = .error
        let request = CharactersList.LoadPage.Request()

        // When
        _ = sut.loadCharacters(request)

        // Then
        XCTAssertTrue(mock.hasFailedLoad)
    }

    func testPresentDetails() {
        // Given
        let mock = MockCharactersListPresentationLogic()
        sut.presenter = mock
        
        let marvelCharacter = MarvelUtility.marvelCharacter
        sut.marvelCharacters.append(marvelCharacter)

        // When
        sut.didSelectRow(0)

        // Then
        XCTAssertTrue(mock.hasPresentCharacterDetails)
    }

}

class MockCharactersListPresentationLogic: CharactersListPresentationLogic {
    var hasLoadCharacters = false
    var hasFailedLoad = false
    var hasPresentCharacterDetails = false

    func didLoadCharacters(_ response: CharactersList.LoadPage.Response) {
        hasLoadCharacters = true
    }

    func didFailLoadCharacters(_ error: Error) {
        hasFailedLoad = true
    }

    func presentCharacterDetails() {
        hasPresentCharacterDetails = true
    }


}
