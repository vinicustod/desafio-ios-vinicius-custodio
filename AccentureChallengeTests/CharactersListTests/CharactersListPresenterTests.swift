//
//  CharactersListPresenterTests.swift
//  AccentureChallenge
//
//  Created by Vinicius Custodio on 26/07/20.
//  Copyright (c) 2020 Vinicius Custodio. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AccentureChallenge
import XCTest

class CharactersListPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: CharactersListPresenter!

    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupCharactersListPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup
    func setupCharactersListPresenter() {
        sut = CharactersListPresenter()
    }

    // MARK: Tests
    func testDisplayCharacters() {
        // Given
        let mock = MockCharactersListDisplayLogic()
        sut.viewController = mock
        let response = CharactersList.LoadPage.Response(marvelCharacters: [])

        // When
        sut.didLoadCharacters(response)

        // Then
        XCTAssertTrue(mock.hasDisplayedCharacters)
    }

    func testDisplayError() {
        // Given
        let mock = MockCharactersListDisplayLogic()
        sut.viewController = mock
        let error = MarvelServiceError.apiError

        // When
        sut.didFailLoadCharacters(error)

        // Then
        XCTAssertTrue(mock.hasDisplayError)
    }

    func testDisplayCharacterDetails() {
        // Given
        let mock = MockCharactersListDisplayLogic()
        sut.viewController = mock

        // When
        sut.presentCharacterDetails()

        // Then
        XCTAssertTrue(mock.hasDisplayCharacterDetails)

    }
}

class MockCharactersListDisplayLogic: CharactersListDisplayLogic {
    var hasDisplayedCharacters = false
    var hasDisplayError = false
    var hasDisplayCharacterDetails = false

    func displayCharacters(_ viewModel: CharactersList.LoadPage.ViewModel) {
        hasDisplayedCharacters = true
    }

    func displayError(_ error: String) {
        hasDisplayError = true
    }

    func displayCharacterDetails() {
        hasDisplayCharacterDetails = true
    }


}
